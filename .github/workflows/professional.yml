# This is a basic workflow to help you get started with the Run C/C++test action for Make-based project.
name: C/C++test Professional with Make

on:
  # Triggers the workflow on push or pull request events but only for the master branch.
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  run-cpptest-make:
    name: Analyze project with C/C++test

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v3
    #  with: 
    #   fetch-depth: 0
    
    # Builds your Make project using 'cpptesttrace' to collect input data for code analysis.
    # Be sure 'cpptesttrace' is available on $PATH.
    - name: Build project
      run: cpptesttrace make clean all
      
    # Configures your CMake project. Be sure the compile_commands.json file is created.
    #- name: Configure project
    #  run: cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -S . -B build

    # Builds your CMake project. (This step is optional, as it is not required for code analysis).
    #- name: Build project (optional)
    #  run: cmake --build build

    - name: Run Parasoft C/C++test
      uses: parasoft/run-cpptest-action@2.0.1
      with:
        # Installation folder of Parasoft C/C++test. If not specified, the cpptestcli executable must be added to $PATH.
        #installDir: # optional
        # Working directory for running C/C++test.
        #workingDir: # optional, default is ${{ github.workspace }}
        # Identifier of a compiler configuration. Ensure you specify the configuration that matches your compiler.
        #compilerConfig: # optional, default is gcc_9-64
        # Test configuration to be used for code analysis.
        #testConfig: # optional, default is builtin://Recommended Rules
        # Output folder for reports from code analysis.
        #reportDir: # optional, default is reports
        # Format of reports from code analysis.
        #reportFormat: # optional, default is xml,html,sarif
        # Input scope for analysis (typically, cpptestscan.bdf or compile_commands.json, depending on the project type and the build system).
        #input: # optional, default is cpptestscan.bdf
        # Additional parameters for the cpptestcli executable.
        additionalParams: '-property "report.format=sarif" -property bdf.import.compiler.family=gcc_7-64'
        # Command line pattern for running C/C++test.
        commandLinePattern: '${cpptestcli} -data ../workspace -config "${testConfig}" -report "${reportDir}" -bdf "${input}" ${additionalParams}'

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: reports/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: CpptestReports
        path: reports/*.*
